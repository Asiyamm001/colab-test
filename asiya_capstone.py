# -*- coding: utf-8 -*-
"""asiya capstone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Uz6bcfGMZfMnxlZV1rrkXHearS4Tk76I
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd


df=pd.read_csv("/content/covid_19.csv")

print(df)

df.head()

df.tail()

df.shape

df.dtypes

df.isnull().sum()

df.duplicated()

df['Date'] = pd.to_datetime(df['Date'], errors='coerce')

df = df.drop_duplicates()

df['Confirmed'] = df['Confirmed'].replace(0, np.nan)

df

df['Mortality_Rate'] = df['Deaths'] / df['Confirmed']
df['Recovery_Rate'] = df['Recovered'] / df['Confirmed']

df['Recovery_Rate']

df

df['Daily_Confirmed_Growth'] = df.groupby(['Country/Region', 'Province/State'])['Confirmed'].diff().fillna(0)

df

df['Confirmed'] = df['Confirmed'].fillna(0)

df

df['Mortality_Rate'] = df['Mortality_Rate'].fillna(0)

df

df.describe().T

plt.figure(figsize=(10, 6))
sns.lineplot(data=df, x='Date', y='Confirmed', label='Confirmed Cases')
sns.lineplot(data=df, x='Date', y='Deaths', label='Deaths')
sns.lineplot(data=df, x='Date', y='Recovered', label='Recovered')
plt.title('COVID-19 Cases Over Time')
plt.legend()
plt.show()

# Filter the dataframe to include only numeric columns
numeric_cols = df.select_dtypes(include=[np.number])

# Compute the correlation matrix
correlation_matrix = numeric_cols.corr()

# Plot the heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Filter for numeric columns only
numeric_cols = df.select_dtypes(include=[np.number]).columns
correlation_matrix = df[numeric_cols].corr()

# Plot the correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, mean_squared_error
from statsmodels.tsa.arima.model import ARIMA




# Prepare data for ARIMA
time_series_data = df.groupby('Date')['Confirmed'].sum()

# Fit ARIMA model
model = ARIMA(time_series_data, order=(5, 1, 0))
model_fit = model.fit()
print(model_fit.summary())

# Plot predictions
plt.figure(figsize=(10, 6))
plt.plot(time_series_data, label='Actual')
plt.plot(model_fit.fittedvalues, label='Fitted', color='red')
plt.title('Time-Series Forecasting with ARIMA')
plt.legend()
plt.show()

# Prepare data for classification
df['Severity'] = np.where(df['Mortality_Rate'] > 0.05, 1, 0)  # Example threshold for severity
features = ['Confirmed', 'Deaths', 'Recovered', 'Daily_Confirmed_Growth', 'Mortality_Rate']
X = df[features]
y = df['Severity']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train Random Forest Classifier
clf = RandomForestClassifier()
clf.fit(X_train, y_train)

# Evaluate model
y_pred = clf.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

# Feature importance
plt.figure(figsize=(10, 6))
sns.barplot(x=clf.feature_importances_, y=features)
plt.title('Feature Importance')
plt.show()

# Confirmed cases per region
region_data = df.groupby('WHO Region')['Confirmed'].sum().reset_index()

plt.figure(figsize=(10, 6))
sns.barplot(data=region_data, x='WHO Region', y='Confirmed')
plt.title('Total Confirmed Cases by WHO Region')
plt.xticks(rotation=45)
plt.show()